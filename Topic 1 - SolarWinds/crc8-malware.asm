; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31332.0 

	TITLE	C:\Users\jerem\OneDrive - Grand Canyon University\ITT-210 (2022 Revision)\A1 Resources\crc8-malware.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_crc8
EXTRN	_strlen:PROC
EXTRN	_strncmp:PROC
_DATA	SEGMENT
$SG7880	DB	'exploitc2.io', 00H
	ORG $+3
$SG7881	DB	'exploitc2.io', 00H
	ORG $+3
$SG7882	DB	'exploitc2.io', 00H
	ORG $+3
$SG7883	DB	'exploitc2.io', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_sum$ = -4						; size = 1
_extract$ = -3						; size = 1
_tempI$2 = -2						; size = 1
_crc$ = -1						; size = 1
_data$ = 8						; size = 4
_length$ = 12						; size = 4
_crc8	PROC
; File C:\Users\jerem\OneDrive - Grand Canyon University\ITT-210 (2022 Revision)\A1 Resources\crc8-malware.c
; Line 5
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 6
	push	OFFSET $SG7880
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET $SG7881
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN8@crc8
; Line 7
	push	OFFSET $SG7882
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 8
	push	OFFSET $SG7883
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _length$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _length$[ebp], ecx
$LN8@crc8:
; Line 12
	mov	BYTE PTR _crc$[ebp], 0
; Line 15
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@crc8
$LN2@crc8:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@crc8:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _length$[ebp]
	jge	SHORT $LN3@crc8
; Line 17
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _extract$[ebp], dl
; Line 18
	mov	BYTE PTR _tempI$2[ebp], 8
	jmp	SHORT $LN7@crc8
$LN5@crc8:
	mov	al, BYTE PTR _tempI$2[ebp]
	sub	al, 1
	mov	BYTE PTR _tempI$2[ebp], al
$LN7@crc8:
	movsx	ecx, BYTE PTR _tempI$2[ebp]
	test	ecx, ecx
	je	SHORT $LN6@crc8
; Line 20
	movsx	edx, BYTE PTR _crc$[ebp]
	movsx	eax, BYTE PTR _extract$[ebp]
	xor	edx, eax
	and	edx, 1
	mov	BYTE PTR _sum$[ebp], dl
; Line 21
	mov	cl, BYTE PTR _crc$[ebp]
	sar	cl, 1
	mov	BYTE PTR _crc$[ebp], cl
; Line 22
	movsx	edx, BYTE PTR _sum$[ebp]
	test	edx, edx
	je	SHORT $LN9@crc8
; Line 23
	movsx	eax, BYTE PTR _crc$[ebp]
	xor	eax, 140				; 0000008cH
	mov	BYTE PTR _crc$[ebp], al
$LN9@crc8:
; Line 24
	mov	cl, BYTE PTR _extract$[ebp]
	sar	cl, 1
	mov	BYTE PTR _extract$[ebp], cl
; Line 25
	jmp	SHORT $LN5@crc8
$LN6@crc8:
; Line 26
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 1
	mov	DWORD PTR _data$[ebp], edx
; Line 27
	jmp	SHORT $LN2@crc8
$LN3@crc8:
; Line 28
	mov	al, BYTE PTR _crc$[ebp]
; Line 29
	mov	esp, ebp
	pop	ebp
	ret	0
_crc8	ENDP
_TEXT	ENDS
END
